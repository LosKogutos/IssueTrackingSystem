@model IssueTrackingSystem.Models.TicketViewModel

@{
    ViewBag.Title = "Ticket";
    var dict = new RouteValueDictionary();
    dict.Add("spacename", this.ViewContext.RouteData.Values["spacename"].ToString());
}
<h2>Ticket</h2>

<div>
    <hr />
    <dl class="dl-horizontal">
        
        @*title*@
        <dt>
            @Html.DisplayNameFor(model => model.Title)
        </dt>

        <dd id="title">
            @Html.DisplayFor(model => model.Title)
        </dd>

        @*description*@
        <dt>
            @Html.DisplayNameFor(model => model.Description)
        </dt>

        <dd id="descirption">
            @Html.DisplayFor(model => model.Description)
        </dd>

        @*created by*@
        <dt>
            @Html.DisplayNameFor(model => model.CreatedBy)
        </dt>

        <dd id="createdby">
            @Html.DisplayFor(model => model.CreatedBy.Email)
        </dd>

        @*assigned to*@
        <dt>
            @Html.DisplayNameFor(model => model.AssignedTo)
        </dt>

        <dd id="assignedto">
            @Html.DisplayFor(model => model.AssignedTo.Email)
        </dd>

        <dd>
            <input id="assignedto-edit" onclick="ToggleInputFor('assignedto')" type="button" value="Edit" />
        </dd>

        <dd id="assignedto-input" style="display:none">
            @{
                var dictAssignedTo = new RouteValueDictionary();
                dictAssignedTo.Add("spacename", this.ViewContext.RouteData.Values["spacename"].ToString());
                dictAssignedTo.Add("fieldname", "assignedto");
            }
            @using (Html.BeginForm("Ticket", "Space", dictAssignedTo, FormMethod.Post, null))
            {
                @*@Html.EditorFor(model => model.AssignedTo)*@
                @Html.DropDownListFor(model => model.SelectedAssignedTo, new SelectList(Model.Users, "Id", "Email"), "- Please Select -")
                <input type="submit" value="Update" class="btn btn-default" />
            }
        </dd>

        @*eta*@
        <dt>
            @Html.DisplayNameFor(model => model.Eta)
        </dt>

        <dd id="eta">
            @Html.DisplayFor(model => model.Eta)
        </dd>

        @*created date*@
        <dt>
            @Html.DisplayNameFor(model => model.CreatedDate)
        </dt>

        <dd id="createddate">
            @Html.DisplayFor(model => model.CreatedDate)
        </dd>

        @* status *@
        <dt>
            @Html.DisplayNameFor(model => model.Status)
        </dt>

        <dd id="status">
            @Html.DisplayFor(model => model.Status)
        </dd>

        <dd>
            <input id="status-edit" onclick="ToggleInputFor('status')" type="button" value="Edit" />
        </dd>

        <dd id="status-input" style="display:none">
            @{
                var dictStatus = new RouteValueDictionary();
                dictStatus.Add("spacename", this.ViewContext.RouteData.Values["spacename"].ToString());
                dictStatus.Add("fieldname", "status");
            }
            @using (Html.BeginForm("Ticket", "Space", dictStatus, FormMethod.Post, null))
            {
                @Html.EditorFor(model => model.Status)
                <input type="submit" value="Update" class="btn btn-default" />
            }
        </dd>
    </dl>
</div>
<p>
    @{var dictionary = new RouteValueDictionary();
        dictionary.Add("spacename", this.ViewContext.RouteData.Values["spacename"].ToString());
        Html.ActionLink("Back to List", "Cardwall", "Space", dictionary, null);
    }
</p>
<script>
    function ToggleInputFor(field) {
        var element = $('#' + field + '-input');
        var display = element.css("display");
        
        if (display == "none") {
            element.attr("style", "display:inline");
        }
        else if (display == "inline") {
            element.attr("style", "display:none");
        }
    }
</script>